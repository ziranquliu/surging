// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: language-agent/Meter.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from language-agent/Meter.proto</summary>
public static partial class MeterReflection {

  #region Descriptor
  /// <summary>File descriptor for language-agent/Meter.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MeterReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChpsYW5ndWFnZS1hZ2VudC9NZXRlci5wcm90bxoTY29tbW9uL0NvbW1vbi5w",
          "cm90byIkCgVMYWJlbBIMCgRuYW1lGAEgASgJEg0KBXZhbHVlGAIgASgJIjEK",
          "EE1ldGVyQnVja2V0VmFsdWUSDgoGYnVja2V0GAEgASgBEg0KBWNvdW50GAIg",
          "ASgDIkcKEE1ldGVyU2luZ2xlVmFsdWUSDAoEbmFtZRgBIAEoCRIWCgZsYWJl",
          "bHMYAiADKAsyBi5MYWJlbBINCgV2YWx1ZRgDIAEoASJZCg5NZXRlckhpc3Rv",
          "Z3JhbRIMCgRuYW1lGAEgASgJEhYKBmxhYmVscxgCIAMoCzIGLkxhYmVsEiEK",
          "BnZhbHVlcxgDIAMoCzIRLk1ldGVyQnVja2V0VmFsdWUiogEKCU1ldGVyRGF0",
          "YRIoCgtzaW5nbGVWYWx1ZRgBIAEoCzIRLk1ldGVyU2luZ2xlVmFsdWVIABIk",
          "CgloaXN0b2dyYW0YAiABKAsyDy5NZXRlckhpc3RvZ3JhbUgAEg8KB3NlcnZp",
          "Y2UYAyABKAkSFwoPc2VydmljZUluc3RhbmNlGAQgASgJEhEKCXRpbWVzdGFt",
          "cBgFIAEoA0IICgZtZXRyaWMiNAoTTWV0ZXJEYXRhQ29sbGVjdGlvbhIdCglt",
          "ZXRlckRhdGEYASADKAsyCi5NZXRlckRhdGEyOgoSTWV0ZXJSZXBvcnRTZXJ2",
          "aWNlEiQKB2NvbGxlY3QSCi5NZXRlckRhdGEaCS5Db21tYW5kcyIAKAFCNwoz",
          "b3JnLmFwYWNoZS5za3l3YWxraW5nLmFwbS5uZXR3b3JrLmxhbmd1YWdlLmFn",
          "ZW50LnYzUAFiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.V3.CommonReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Label), global::Label.Parser, new[]{ "Name", "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MeterBucketValue), global::MeterBucketValue.Parser, new[]{ "Bucket", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MeterSingleValue), global::MeterSingleValue.Parser, new[]{ "Name", "Labels", "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MeterHistogram), global::MeterHistogram.Parser, new[]{ "Name", "Labels", "Values" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MeterData), global::MeterData.Parser, new[]{ "SingleValue", "Histogram", "Service", "ServiceInstance", "Timestamp" }, new[]{ "Metric" }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MeterDataCollection), global::MeterDataCollection.Parser, new[]{ "MeterData" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// Label of the meter
/// </summary>
public sealed partial class Label : pb::IMessage<Label> {
  private static readonly pb::MessageParser<Label> _parser = new pb::MessageParser<Label>(() => new Label());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Label> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MeterReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Label() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Label(Label other) : this() {
    name_ = other.name_;
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Label Clone() {
    return new Label(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private string value_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Value {
    get { return value_; }
    set {
      value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Label);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Label other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Value != other.Value) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Value.Length != 0) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Value.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Value.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Label other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Value.Length != 0) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Value = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// The histogram element definition. It includes the bucket lower boundary and the count in the bucket.
/// </summary>
public sealed partial class MeterBucketValue : pb::IMessage<MeterBucketValue> {
  private static readonly pb::MessageParser<MeterBucketValue> _parser = new pb::MessageParser<MeterBucketValue>(() => new MeterBucketValue());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MeterBucketValue> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MeterReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterBucketValue() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterBucketValue(MeterBucketValue other) : this() {
    bucket_ = other.bucket_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterBucketValue Clone() {
    return new MeterBucketValue(this);
  }

  /// <summary>Field number for the "bucket" field.</summary>
  public const int BucketFieldNumber = 1;
  private double bucket_;
  /// <summary>
  /// The value represents the min value of the bucket,
  /// the  upper boundary is determined by next MeterBucketValue$bucket,
  /// if it doesn't exist, the upper boundary is positive infinity.
  /// Also, could use Int32.MIN_VALUE to represent negative infinity.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Bucket {
    get { return bucket_; }
    set {
      bucket_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private long count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MeterBucketValue);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MeterBucketValue other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bucket, other.Bucket)) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Bucket != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bucket);
    if (Count != 0L) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Bucket != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(Bucket);
    }
    if (Count != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Bucket != 0D) {
      size += 1 + 8;
    }
    if (Count != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MeterBucketValue other) {
    if (other == null) {
      return;
    }
    if (other.Bucket != 0D) {
      Bucket = other.Bucket;
    }
    if (other.Count != 0L) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          Bucket = input.ReadDouble();
          break;
        }
        case 16: {
          Count = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Meter single value
/// </summary>
public sealed partial class MeterSingleValue : pb::IMessage<MeterSingleValue> {
  private static readonly pb::MessageParser<MeterSingleValue> _parser = new pb::MessageParser<MeterSingleValue>(() => new MeterSingleValue());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MeterSingleValue> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MeterReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterSingleValue() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterSingleValue(MeterSingleValue other) : this() {
    name_ = other.name_;
    labels_ = other.labels_.Clone();
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterSingleValue Clone() {
    return new MeterSingleValue(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  /// <summary>
  /// Meter name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "labels" field.</summary>
  public const int LabelsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Label> _repeated_labels_codec
      = pb::FieldCodec.ForMessage(18, global::Label.Parser);
  private readonly pbc::RepeatedField<global::Label> labels_ = new pbc::RepeatedField<global::Label>();
  /// <summary>
  /// Labels
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Label> Labels {
    get { return labels_; }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 3;
  private double value_;
  /// <summary>
  /// Single value
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MeterSingleValue);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MeterSingleValue other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if(!labels_.Equals(other.labels_)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= labels_.GetHashCode();
    if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    labels_.WriteTo(output, _repeated_labels_codec);
    if (Value != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += labels_.CalculateSize(_repeated_labels_codec);
    if (Value != 0D) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MeterSingleValue other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    labels_.Add(other.labels_);
    if (other.Value != 0D) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          labels_.AddEntriesFrom(input, _repeated_labels_codec);
          break;
        }
        case 25: {
          Value = input.ReadDouble();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Histogram
/// </summary>
public sealed partial class MeterHistogram : pb::IMessage<MeterHistogram> {
  private static readonly pb::MessageParser<MeterHistogram> _parser = new pb::MessageParser<MeterHistogram>(() => new MeterHistogram());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MeterHistogram> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MeterReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterHistogram() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterHistogram(MeterHistogram other) : this() {
    name_ = other.name_;
    labels_ = other.labels_.Clone();
    values_ = other.values_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterHistogram Clone() {
    return new MeterHistogram(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  /// <summary>
  /// Meter name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "labels" field.</summary>
  public const int LabelsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Label> _repeated_labels_codec
      = pb::FieldCodec.ForMessage(18, global::Label.Parser);
  private readonly pbc::RepeatedField<global::Label> labels_ = new pbc::RepeatedField<global::Label>();
  /// <summary>
  /// Labels
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Label> Labels {
    get { return labels_; }
  }

  /// <summary>Field number for the "values" field.</summary>
  public const int ValuesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::MeterBucketValue> _repeated_values_codec
      = pb::FieldCodec.ForMessage(26, global::MeterBucketValue.Parser);
  private readonly pbc::RepeatedField<global::MeterBucketValue> values_ = new pbc::RepeatedField<global::MeterBucketValue>();
  /// <summary>
  /// Customize the buckets
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MeterBucketValue> Values {
    get { return values_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MeterHistogram);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MeterHistogram other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if(!labels_.Equals(other.labels_)) return false;
    if(!values_.Equals(other.values_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= labels_.GetHashCode();
    hash ^= values_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    labels_.WriteTo(output, _repeated_labels_codec);
    values_.WriteTo(output, _repeated_values_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += labels_.CalculateSize(_repeated_labels_codec);
    size += values_.CalculateSize(_repeated_values_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MeterHistogram other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    labels_.Add(other.labels_);
    values_.Add(other.values_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          labels_.AddEntriesFrom(input, _repeated_labels_codec);
          break;
        }
        case 26: {
          values_.AddEntriesFrom(input, _repeated_values_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Single meter data, if the same metrics have a different label, they will separate.
/// </summary>
public sealed partial class MeterData : pb::IMessage<MeterData> {
  private static readonly pb::MessageParser<MeterData> _parser = new pb::MessageParser<MeterData>(() => new MeterData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MeterData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MeterReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterData(MeterData other) : this() {
    service_ = other.service_;
    serviceInstance_ = other.serviceInstance_;
    timestamp_ = other.timestamp_;
    switch (other.MetricCase) {
      case MetricOneofCase.SingleValue:
        SingleValue = other.SingleValue.Clone();
        break;
      case MetricOneofCase.Histogram:
        Histogram = other.Histogram.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterData Clone() {
    return new MeterData(this);
  }

  /// <summary>Field number for the "singleValue" field.</summary>
  public const int SingleValueFieldNumber = 1;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MeterSingleValue SingleValue {
    get { return metricCase_ == MetricOneofCase.SingleValue ? (global::MeterSingleValue) metric_ : null; }
    set {
      metric_ = value;
      metricCase_ = value == null ? MetricOneofCase.None : MetricOneofCase.SingleValue;
    }
  }

  /// <summary>Field number for the "histogram" field.</summary>
  public const int HistogramFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MeterHistogram Histogram {
    get { return metricCase_ == MetricOneofCase.Histogram ? (global::MeterHistogram) metric_ : null; }
    set {
      metric_ = value;
      metricCase_ = value == null ? MetricOneofCase.None : MetricOneofCase.Histogram;
    }
  }

  /// <summary>Field number for the "service" field.</summary>
  public const int ServiceFieldNumber = 3;
  private string service_ = "";
  /// <summary>
  /// Service name, be set value in the first element in the stream-call.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Service {
    get { return service_; }
    set {
      service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "serviceInstance" field.</summary>
  public const int ServiceInstanceFieldNumber = 4;
  private string serviceInstance_ = "";
  /// <summary>
  /// Service instance name, be set value in the first element in the stream-call.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ServiceInstance {
    get { return serviceInstance_; }
    set {
      serviceInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 5;
  private long timestamp_;
  /// <summary>
  /// Meter data report time, be set value in the first element in the stream-call.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  private object metric_;
  /// <summary>Enum of possible cases for the "metric" oneof.</summary>
  public enum MetricOneofCase {
    None = 0,
    SingleValue = 1,
    Histogram = 2,
  }
  private MetricOneofCase metricCase_ = MetricOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MetricOneofCase MetricCase {
    get { return metricCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMetric() {
    metricCase_ = MetricOneofCase.None;
    metric_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MeterData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MeterData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SingleValue, other.SingleValue)) return false;
    if (!object.Equals(Histogram, other.Histogram)) return false;
    if (Service != other.Service) return false;
    if (ServiceInstance != other.ServiceInstance) return false;
    if (Timestamp != other.Timestamp) return false;
    if (MetricCase != other.MetricCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (metricCase_ == MetricOneofCase.SingleValue) hash ^= SingleValue.GetHashCode();
    if (metricCase_ == MetricOneofCase.Histogram) hash ^= Histogram.GetHashCode();
    if (Service.Length != 0) hash ^= Service.GetHashCode();
    if (ServiceInstance.Length != 0) hash ^= ServiceInstance.GetHashCode();
    if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
    hash ^= (int) metricCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (metricCase_ == MetricOneofCase.SingleValue) {
      output.WriteRawTag(10);
      output.WriteMessage(SingleValue);
    }
    if (metricCase_ == MetricOneofCase.Histogram) {
      output.WriteRawTag(18);
      output.WriteMessage(Histogram);
    }
    if (Service.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Service);
    }
    if (ServiceInstance.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ServiceInstance);
    }
    if (Timestamp != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(Timestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (metricCase_ == MetricOneofCase.SingleValue) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleValue);
    }
    if (metricCase_ == MetricOneofCase.Histogram) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Histogram);
    }
    if (Service.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
    }
    if (ServiceInstance.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceInstance);
    }
    if (Timestamp != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MeterData other) {
    if (other == null) {
      return;
    }
    if (other.Service.Length != 0) {
      Service = other.Service;
    }
    if (other.ServiceInstance.Length != 0) {
      ServiceInstance = other.ServiceInstance;
    }
    if (other.Timestamp != 0L) {
      Timestamp = other.Timestamp;
    }
    switch (other.MetricCase) {
      case MetricOneofCase.SingleValue:
        if (SingleValue == null) {
          SingleValue = new global::MeterSingleValue();
        }
        SingleValue.MergeFrom(other.SingleValue);
        break;
      case MetricOneofCase.Histogram:
        if (Histogram == null) {
          Histogram = new global::MeterHistogram();
        }
        Histogram.MergeFrom(other.Histogram);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          global::MeterSingleValue subBuilder = new global::MeterSingleValue();
          if (metricCase_ == MetricOneofCase.SingleValue) {
            subBuilder.MergeFrom(SingleValue);
          }
          input.ReadMessage(subBuilder);
          SingleValue = subBuilder;
          break;
        }
        case 18: {
          global::MeterHistogram subBuilder = new global::MeterHistogram();
          if (metricCase_ == MetricOneofCase.Histogram) {
            subBuilder.MergeFrom(Histogram);
          }
          input.ReadMessage(subBuilder);
          Histogram = subBuilder;
          break;
        }
        case 26: {
          Service = input.ReadString();
          break;
        }
        case 34: {
          ServiceInstance = input.ReadString();
          break;
        }
        case 40: {
          Timestamp = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class MeterDataCollection : pb::IMessage<MeterDataCollection> {
  private static readonly pb::MessageParser<MeterDataCollection> _parser = new pb::MessageParser<MeterDataCollection>(() => new MeterDataCollection());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MeterDataCollection> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MeterReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterDataCollection() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterDataCollection(MeterDataCollection other) : this() {
    meterData_ = other.meterData_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterDataCollection Clone() {
    return new MeterDataCollection(this);
  }

  /// <summary>Field number for the "meterData" field.</summary>
  public const int MeterDataFieldNumber = 1;
  private static readonly pb::FieldCodec<global::MeterData> _repeated_meterData_codec
      = pb::FieldCodec.ForMessage(10, global::MeterData.Parser);
  private readonly pbc::RepeatedField<global::MeterData> meterData_ = new pbc::RepeatedField<global::MeterData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MeterData> MeterData {
    get { return meterData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MeterDataCollection);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MeterDataCollection other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!meterData_.Equals(other.meterData_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= meterData_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    meterData_.WriteTo(output, _repeated_meterData_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += meterData_.CalculateSize(_repeated_meterData_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MeterDataCollection other) {
    if (other == null) {
      return;
    }
    meterData_.Add(other.meterData_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          meterData_.AddEntriesFrom(input, _repeated_meterData_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
