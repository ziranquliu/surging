// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: language-agent/Meter.proto
// </auto-generated>
// Original file comments:
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class MeterReportService
{
  static readonly string __ServiceName = "MeterReportService";

  static readonly grpc::Marshaller<global::MeterData> __Marshaller_MeterData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MeterData.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::SkyWalking.NetworkProtocol.V3.Commands> __Marshaller_Commands = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SkyWalking.NetworkProtocol.V3.Commands.Parser.ParseFrom);

  static readonly grpc::Method<global::MeterData, global::SkyWalking.NetworkProtocol.V3.Commands> __Method_collect = new grpc::Method<global::MeterData, global::SkyWalking.NetworkProtocol.V3.Commands>(
      grpc::MethodType.ClientStreaming,
      __ServiceName,
      "collect",
      __Marshaller_MeterData,
      __Marshaller_Commands);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::MeterReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of MeterReportService</summary>
  [grpc::BindServiceMethod(typeof(MeterReportService), "BindService")]
  public abstract partial class MeterReportServiceBase
  {
    /// <summary>
    /// Meter data is reported in a certain period. The agent/SDK should report all collected metrics in this period through one stream.
    /// </summary>
    /// <param name="requestStream">Used for reading requests from the client.</param>
    /// <param name="context">The context of the server-side call handler being invoked.</param>
    /// <returns>The response to send back to the client (wrapped by a task).</returns>
    public virtual global::System.Threading.Tasks.Task<global::SkyWalking.NetworkProtocol.V3.Commands> collect(grpc::IAsyncStreamReader<global::MeterData> requestStream, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for MeterReportService</summary>
  public partial class MeterReportServiceClient : grpc::ClientBase<MeterReportServiceClient>
  {
    /// <summary>Creates a new client for MeterReportService</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public MeterReportServiceClient(grpc::ChannelBase channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for MeterReportService that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public MeterReportServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected MeterReportServiceClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected MeterReportServiceClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    /// <summary>
    /// Meter data is reported in a certain period. The agent/SDK should report all collected metrics in this period through one stream.
    /// </summary>
    /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
    /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
    /// <param name="cancellationToken">An optional token for canceling the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncClientStreamingCall<global::MeterData, global::SkyWalking.NetworkProtocol.V3.Commands> collect(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return collect(new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    /// <summary>
    /// Meter data is reported in a certain period. The agent/SDK should report all collected metrics in this period through one stream.
    /// </summary>
    /// <param name="options">The options for the call.</param>
    /// <returns>The call object.</returns>
    public virtual grpc::AsyncClientStreamingCall<global::MeterData, global::SkyWalking.NetworkProtocol.V3.Commands> collect(grpc::CallOptions options)
    {
      return CallInvoker.AsyncClientStreamingCall(__Method_collect, null, options);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override MeterReportServiceClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new MeterReportServiceClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(MeterReportServiceBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_collect, serviceImpl.collect).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, MeterReportServiceBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_collect, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::MeterData, global::SkyWalking.NetworkProtocol.V3.Commands>(serviceImpl.collect));
  }

}
#endregion
