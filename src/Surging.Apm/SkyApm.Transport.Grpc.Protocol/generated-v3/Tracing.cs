// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: language-agent/Tracing.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SkyWalking.NetworkProtocol.V3 {

  /// <summary>Holder for reflection information generated from language-agent/Tracing.proto</summary>
  public static partial class TracingReflection {

    #region Descriptor
    /// <summary>File descriptor for language-agent/Tracing.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TracingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxsYW5ndWFnZS1hZ2VudC9UcmFjaW5nLnByb3RvGhNjb21tb24vQ29tbW9u",
            "LnByb3RvIpUBCg1TZWdtZW50T2JqZWN0Eg8KB3RyYWNlSWQYASABKAkSFgoO",
            "dHJhY2VTZWdtZW50SWQYAiABKAkSGgoFc3BhbnMYAyADKAsyCy5TcGFuT2Jq",
            "ZWN0Eg8KB3NlcnZpY2UYBCABKAkSFwoPc2VydmljZUluc3RhbmNlGAUgASgJ",
            "EhUKDWlzU2l6ZUxpbWl0ZWQYBiABKAgi4gEKEFNlZ21lbnRSZWZlcmVuY2US",
            "GQoHcmVmVHlwZRgBIAEoDjIILlJlZlR5cGUSDwoHdHJhY2VJZBgCIAEoCRIc",
            "ChRwYXJlbnRUcmFjZVNlZ21lbnRJZBgDIAEoCRIUCgxwYXJlbnRTcGFuSWQY",
            "BCABKAUSFQoNcGFyZW50U2VydmljZRgFIAEoCRIdChVwYXJlbnRTZXJ2aWNl",
            "SW5zdGFuY2UYBiABKAkSFgoOcGFyZW50RW5kcG9pbnQYByABKAkSIAoYbmV0",
            "d29ya0FkZHJlc3NVc2VkQXRQZWVyGAggASgJIssCCgpTcGFuT2JqZWN0Eg4K",
            "BnNwYW5JZBgBIAEoBRIUCgxwYXJlbnRTcGFuSWQYAiABKAUSEQoJc3RhcnRU",
            "aW1lGAMgASgDEg8KB2VuZFRpbWUYBCABKAMSHwoEcmVmcxgFIAMoCzIRLlNl",
            "Z21lbnRSZWZlcmVuY2USFQoNb3BlcmF0aW9uTmFtZRgGIAEoCRIMCgRwZWVy",
            "GAcgASgJEhsKCHNwYW5UeXBlGAggASgOMgkuU3BhblR5cGUSHQoJc3Bhbkxh",
            "eWVyGAkgASgOMgouU3BhbkxheWVyEhMKC2NvbXBvbmVudElkGAogASgFEg8K",
            "B2lzRXJyb3IYCyABKAgSIQoEdGFncxgMIAMoCzITLktleVN0cmluZ1ZhbHVl",
            "UGFpchISCgRsb2dzGA0gAygLMgQuTG9nEhQKDHNraXBBbmFseXNpcxgOIAEo",
            "CCI2CgNMb2cSDAoEdGltZRgBIAEoAxIhCgRkYXRhGAIgAygLMhMuS2V5U3Ry",
            "aW5nVmFsdWVQYWlyIhAKAklEEgoKAmlkGAEgAygJKioKCFNwYW5UeXBlEgkK",
            "BUVudHJ5EAASCAoERXhpdBABEgkKBUxvY2FsEAIqLAoHUmVmVHlwZRIQCgxD",
            "cm9zc1Byb2Nlc3MQABIPCgtDcm9zc1RocmVhZBABKlUKCVNwYW5MYXllchIL",
            "CgdVbmtub3duEAASDAoIRGF0YWJhc2UQARIQCgxSUENGcmFtZXdvcmsQAhII",
            "CgRIdHRwEAMSBgoCTVEQBBIJCgVDYWNoZRAFMkUKGVRyYWNlU2VnbWVudFJl",
            "cG9ydFNlcnZpY2USKAoHY29sbGVjdBIOLlNlZ21lbnRPYmplY3QaCS5Db21t",
            "YW5kcyIAKAFCfQozb3JnLmFwYWNoZS5za3l3YWxraW5nLmFwbS5uZXR3b3Jr",
            "Lmxhbmd1YWdlLmFnZW50LnYzUAFaJHNreXdhbGtpbmcvbmV0d29yay9sYW5n",
            "dWFnZS9hZ2VudC92M6oCHVNreVdhbGtpbmcuTmV0d29ya1Byb3RvY29sLlYz",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.V3.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SkyWalking.NetworkProtocol.V3.SpanType), typeof(global::SkyWalking.NetworkProtocol.V3.RefType), typeof(global::SkyWalking.NetworkProtocol.V3.SpanLayer), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.SegmentObject), global::SkyWalking.NetworkProtocol.V3.SegmentObject.Parser, new[]{ "TraceId", "TraceSegmentId", "Spans", "Service", "ServiceInstance", "IsSizeLimited" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.SegmentReference), global::SkyWalking.NetworkProtocol.V3.SegmentReference.Parser, new[]{ "RefType", "TraceId", "ParentTraceSegmentId", "ParentSpanId", "ParentService", "ParentServiceInstance", "ParentEndpoint", "NetworkAddressUsedAtPeer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.SpanObject), global::SkyWalking.NetworkProtocol.V3.SpanObject.Parser, new[]{ "SpanId", "ParentSpanId", "StartTime", "EndTime", "Refs", "OperationName", "Peer", "SpanType", "SpanLayer", "ComponentId", "IsError", "Tags", "Logs", "SkipAnalysis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.Log), global::SkyWalking.NetworkProtocol.V3.Log.Parser, new[]{ "Time", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.ID), global::SkyWalking.NetworkProtocol.V3.ID.Parser, new[]{ "Id" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SpanType {
    [pbr::OriginalName("Entry")] Entry = 0,
    [pbr::OriginalName("Exit")] Exit = 1,
    [pbr::OriginalName("Local")] Local = 2,
  }

  public enum RefType {
    [pbr::OriginalName("CrossProcess")] CrossProcess = 0,
    [pbr::OriginalName("CrossThread")] CrossThread = 1,
  }

  public enum SpanLayer {
    [pbr::OriginalName("Unknown")] Unknown = 0,
    [pbr::OriginalName("Database")] Database = 1,
    [pbr::OriginalName("RPCFramework")] Rpcframework = 2,
    [pbr::OriginalName("Http")] Http = 3,
    [pbr::OriginalName("MQ")] Mq = 4,
    [pbr::OriginalName("Cache")] Cache = 5,
  }

  #endregion

  #region Messages
  public sealed partial class SegmentObject : pb::IMessage<SegmentObject> {
    private static readonly pb::MessageParser<SegmentObject> _parser = new pb::MessageParser<SegmentObject>(() => new SegmentObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SegmentObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.TracingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentObject(SegmentObject other) : this() {
      traceId_ = other.traceId_;
      traceSegmentId_ = other.traceSegmentId_;
      spans_ = other.spans_.Clone();
      service_ = other.service_;
      serviceInstance_ = other.serviceInstance_;
      isSizeLimited_ = other.isSizeLimited_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentObject Clone() {
      return new SegmentObject(this);
    }

    /// <summary>Field number for the "traceId" field.</summary>
    public const int TraceIdFieldNumber = 1;
    private string traceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "traceSegmentId" field.</summary>
    public const int TraceSegmentIdFieldNumber = 2;
    private string traceSegmentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceSegmentId {
      get { return traceSegmentId_; }
      set {
        traceSegmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spans" field.</summary>
    public const int SpansFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.SpanObject> _repeated_spans_codec
        = pb::FieldCodec.ForMessage(26, global::SkyWalking.NetworkProtocol.V3.SpanObject.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SpanObject> spans_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SpanObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SpanObject> Spans {
      get { return spans_; }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 4;
    private string service_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceInstance" field.</summary>
    public const int ServiceInstanceFieldNumber = 5;
    private string serviceInstance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceInstance {
      get { return serviceInstance_; }
      set {
        serviceInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isSizeLimited" field.</summary>
    public const int IsSizeLimitedFieldNumber = 6;
    private bool isSizeLimited_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSizeLimited {
      get { return isSizeLimited_; }
      set {
        isSizeLimited_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SegmentObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SegmentObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceId != other.TraceId) return false;
      if (TraceSegmentId != other.TraceSegmentId) return false;
      if(!spans_.Equals(other.spans_)) return false;
      if (Service != other.Service) return false;
      if (ServiceInstance != other.ServiceInstance) return false;
      if (IsSizeLimited != other.IsSizeLimited) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (TraceSegmentId.Length != 0) hash ^= TraceSegmentId.GetHashCode();
      hash ^= spans_.GetHashCode();
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (ServiceInstance.Length != 0) hash ^= ServiceInstance.GetHashCode();
      if (IsSizeLimited != false) hash ^= IsSizeLimited.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TraceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TraceId);
      }
      if (TraceSegmentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TraceSegmentId);
      }
      spans_.WriteTo(output, _repeated_spans_codec);
      if (Service.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Service);
      }
      if (ServiceInstance.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ServiceInstance);
      }
      if (IsSizeLimited != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsSizeLimited);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceId);
      }
      if (TraceSegmentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceSegmentId);
      }
      size += spans_.CalculateSize(_repeated_spans_codec);
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (ServiceInstance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceInstance);
      }
      if (IsSizeLimited != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SegmentObject other) {
      if (other == null) {
        return;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.TraceSegmentId.Length != 0) {
        TraceSegmentId = other.TraceSegmentId;
      }
      spans_.Add(other.spans_);
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.ServiceInstance.Length != 0) {
        ServiceInstance = other.ServiceInstance;
      }
      if (other.IsSizeLimited != false) {
        IsSizeLimited = other.IsSizeLimited;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TraceId = input.ReadString();
            break;
          }
          case 18: {
            TraceSegmentId = input.ReadString();
            break;
          }
          case 26: {
            spans_.AddEntriesFrom(input, _repeated_spans_codec);
            break;
          }
          case 34: {
            Service = input.ReadString();
            break;
          }
          case 42: {
            ServiceInstance = input.ReadString();
            break;
          }
          case 48: {
            IsSizeLimited = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SegmentReference : pb::IMessage<SegmentReference> {
    private static readonly pb::MessageParser<SegmentReference> _parser = new pb::MessageParser<SegmentReference>(() => new SegmentReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SegmentReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.TracingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentReference(SegmentReference other) : this() {
      refType_ = other.refType_;
      traceId_ = other.traceId_;
      parentTraceSegmentId_ = other.parentTraceSegmentId_;
      parentSpanId_ = other.parentSpanId_;
      parentService_ = other.parentService_;
      parentServiceInstance_ = other.parentServiceInstance_;
      parentEndpoint_ = other.parentEndpoint_;
      networkAddressUsedAtPeer_ = other.networkAddressUsedAtPeer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentReference Clone() {
      return new SegmentReference(this);
    }

    /// <summary>Field number for the "refType" field.</summary>
    public const int RefTypeFieldNumber = 1;
    private global::SkyWalking.NetworkProtocol.V3.RefType refType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.RefType RefType {
      get { return refType_; }
      set {
        refType_ = value;
      }
    }

    /// <summary>Field number for the "traceId" field.</summary>
    public const int TraceIdFieldNumber = 2;
    private string traceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentTraceSegmentId" field.</summary>
    public const int ParentTraceSegmentIdFieldNumber = 3;
    private string parentTraceSegmentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentTraceSegmentId {
      get { return parentTraceSegmentId_; }
      set {
        parentTraceSegmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentSpanId" field.</summary>
    public const int ParentSpanIdFieldNumber = 4;
    private int parentSpanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = value;
      }
    }

    /// <summary>Field number for the "parentService" field.</summary>
    public const int ParentServiceFieldNumber = 5;
    private string parentService_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentService {
      get { return parentService_; }
      set {
        parentService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentServiceInstance" field.</summary>
    public const int ParentServiceInstanceFieldNumber = 6;
    private string parentServiceInstance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentServiceInstance {
      get { return parentServiceInstance_; }
      set {
        parentServiceInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentEndpoint" field.</summary>
    public const int ParentEndpointFieldNumber = 7;
    private string parentEndpoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentEndpoint {
      get { return parentEndpoint_; }
      set {
        parentEndpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "networkAddressUsedAtPeer" field.</summary>
    public const int NetworkAddressUsedAtPeerFieldNumber = 8;
    private string networkAddressUsedAtPeer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkAddressUsedAtPeer {
      get { return networkAddressUsedAtPeer_; }
      set {
        networkAddressUsedAtPeer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SegmentReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SegmentReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefType != other.RefType) return false;
      if (TraceId != other.TraceId) return false;
      if (ParentTraceSegmentId != other.ParentTraceSegmentId) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (ParentService != other.ParentService) return false;
      if (ParentServiceInstance != other.ParentServiceInstance) return false;
      if (ParentEndpoint != other.ParentEndpoint) return false;
      if (NetworkAddressUsedAtPeer != other.NetworkAddressUsedAtPeer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefType != 0) hash ^= RefType.GetHashCode();
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (ParentTraceSegmentId.Length != 0) hash ^= ParentTraceSegmentId.GetHashCode();
      if (ParentSpanId != 0) hash ^= ParentSpanId.GetHashCode();
      if (ParentService.Length != 0) hash ^= ParentService.GetHashCode();
      if (ParentServiceInstance.Length != 0) hash ^= ParentServiceInstance.GetHashCode();
      if (ParentEndpoint.Length != 0) hash ^= ParentEndpoint.GetHashCode();
      if (NetworkAddressUsedAtPeer.Length != 0) hash ^= NetworkAddressUsedAtPeer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RefType);
      }
      if (TraceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TraceId);
      }
      if (ParentTraceSegmentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParentTraceSegmentId);
      }
      if (ParentSpanId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ParentSpanId);
      }
      if (ParentService.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ParentService);
      }
      if (ParentServiceInstance.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ParentServiceInstance);
      }
      if (ParentEndpoint.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ParentEndpoint);
      }
      if (NetworkAddressUsedAtPeer.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(NetworkAddressUsedAtPeer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RefType);
      }
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceId);
      }
      if (ParentTraceSegmentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentTraceSegmentId);
      }
      if (ParentSpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentSpanId);
      }
      if (ParentService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentService);
      }
      if (ParentServiceInstance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentServiceInstance);
      }
      if (ParentEndpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentEndpoint);
      }
      if (NetworkAddressUsedAtPeer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkAddressUsedAtPeer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SegmentReference other) {
      if (other == null) {
        return;
      }
      if (other.RefType != 0) {
        RefType = other.RefType;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.ParentTraceSegmentId.Length != 0) {
        ParentTraceSegmentId = other.ParentTraceSegmentId;
      }
      if (other.ParentSpanId != 0) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.ParentService.Length != 0) {
        ParentService = other.ParentService;
      }
      if (other.ParentServiceInstance.Length != 0) {
        ParentServiceInstance = other.ParentServiceInstance;
      }
      if (other.ParentEndpoint.Length != 0) {
        ParentEndpoint = other.ParentEndpoint;
      }
      if (other.NetworkAddressUsedAtPeer.Length != 0) {
        NetworkAddressUsedAtPeer = other.NetworkAddressUsedAtPeer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RefType = (global::SkyWalking.NetworkProtocol.V3.RefType) input.ReadEnum();
            break;
          }
          case 18: {
            TraceId = input.ReadString();
            break;
          }
          case 26: {
            ParentTraceSegmentId = input.ReadString();
            break;
          }
          case 32: {
            ParentSpanId = input.ReadInt32();
            break;
          }
          case 42: {
            ParentService = input.ReadString();
            break;
          }
          case 50: {
            ParentServiceInstance = input.ReadString();
            break;
          }
          case 58: {
            ParentEndpoint = input.ReadString();
            break;
          }
          case 66: {
            NetworkAddressUsedAtPeer = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpanObject : pb::IMessage<SpanObject> {
    private static readonly pb::MessageParser<SpanObject> _parser = new pb::MessageParser<SpanObject>(() => new SpanObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpanObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.TracingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanObject(SpanObject other) : this() {
      spanId_ = other.spanId_;
      parentSpanId_ = other.parentSpanId_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      refs_ = other.refs_.Clone();
      operationName_ = other.operationName_;
      peer_ = other.peer_;
      spanType_ = other.spanType_;
      spanLayer_ = other.spanLayer_;
      componentId_ = other.componentId_;
      isError_ = other.isError_;
      tags_ = other.tags_.Clone();
      logs_ = other.logs_.Clone();
      skipAnalysis_ = other.skipAnalysis_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanObject Clone() {
      return new SpanObject(this);
    }

    /// <summary>Field number for the "spanId" field.</summary>
    public const int SpanIdFieldNumber = 1;
    private int spanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpanId {
      get { return spanId_; }
      set {
        spanId_ = value;
      }
    }

    /// <summary>Field number for the "parentSpanId" field.</summary>
    public const int ParentSpanIdFieldNumber = 2;
    private int parentSpanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "refs" field.</summary>
    public const int RefsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.SegmentReference> _repeated_refs_codec
        = pb::FieldCodec.ForMessage(42, global::SkyWalking.NetworkProtocol.V3.SegmentReference.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SegmentReference> refs_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SegmentReference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SegmentReference> Refs {
      get { return refs_; }
    }

    /// <summary>Field number for the "operationName" field.</summary>
    public const int OperationNameFieldNumber = 6;
    private string operationName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperationName {
      get { return operationName_; }
      set {
        operationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "peer" field.</summary>
    public const int PeerFieldNumber = 7;
    private string peer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Peer {
      get { return peer_; }
      set {
        peer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spanType" field.</summary>
    public const int SpanTypeFieldNumber = 8;
    private global::SkyWalking.NetworkProtocol.V3.SpanType spanType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.SpanType SpanType {
      get { return spanType_; }
      set {
        spanType_ = value;
      }
    }

    /// <summary>Field number for the "spanLayer" field.</summary>
    public const int SpanLayerFieldNumber = 9;
    private global::SkyWalking.NetworkProtocol.V3.SpanLayer spanLayer_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.SpanLayer SpanLayer {
      get { return spanLayer_; }
      set {
        spanLayer_ = value;
      }
    }

    /// <summary>Field number for the "componentId" field.</summary>
    public const int ComponentIdFieldNumber = 10;
    private int componentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComponentId {
      get { return componentId_; }
      set {
        componentId_ = value;
      }
    }

    /// <summary>Field number for the "isError" field.</summary>
    public const int IsErrorFieldNumber = 11;
    private bool isError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(98, global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> tags_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.Log> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(106, global::SkyWalking.NetworkProtocol.V3.Log.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.Log> logs_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.Log>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.Log> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "skipAnalysis" field.</summary>
    public const int SkipAnalysisFieldNumber = 14;
    private bool skipAnalysis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SkipAnalysis {
      get { return skipAnalysis_; }
      set {
        skipAnalysis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpanObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpanObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpanId != other.SpanId) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if(!refs_.Equals(other.refs_)) return false;
      if (OperationName != other.OperationName) return false;
      if (Peer != other.Peer) return false;
      if (SpanType != other.SpanType) return false;
      if (SpanLayer != other.SpanLayer) return false;
      if (ComponentId != other.ComponentId) return false;
      if (IsError != other.IsError) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if(!logs_.Equals(other.logs_)) return false;
      if (SkipAnalysis != other.SkipAnalysis) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpanId != 0) hash ^= SpanId.GetHashCode();
      if (ParentSpanId != 0) hash ^= ParentSpanId.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      hash ^= refs_.GetHashCode();
      if (OperationName.Length != 0) hash ^= OperationName.GetHashCode();
      if (Peer.Length != 0) hash ^= Peer.GetHashCode();
      if (SpanType != 0) hash ^= SpanType.GetHashCode();
      if (SpanLayer != 0) hash ^= SpanLayer.GetHashCode();
      if (ComponentId != 0) hash ^= ComponentId.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      hash ^= tags_.GetHashCode();
      hash ^= logs_.GetHashCode();
      if (SkipAnalysis != false) hash ^= SkipAnalysis.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpanId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpanId);
      }
      if (ParentSpanId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ParentSpanId);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      refs_.WriteTo(output, _repeated_refs_codec);
      if (OperationName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OperationName);
      }
      if (Peer.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Peer);
      }
      if (SpanType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) SpanType);
      }
      if (SpanLayer != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) SpanLayer);
      }
      if (ComponentId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ComponentId);
      }
      if (IsError != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsError);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      logs_.WriteTo(output, _repeated_logs_codec);
      if (SkipAnalysis != false) {
        output.WriteRawTag(112);
        output.WriteBool(SkipAnalysis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpanId);
      }
      if (ParentSpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentSpanId);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      size += refs_.CalculateSize(_repeated_refs_codec);
      if (OperationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationName);
      }
      if (Peer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Peer);
      }
      if (SpanType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpanType);
      }
      if (SpanLayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpanLayer);
      }
      if (ComponentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComponentId);
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (SkipAnalysis != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpanObject other) {
      if (other == null) {
        return;
      }
      if (other.SpanId != 0) {
        SpanId = other.SpanId;
      }
      if (other.ParentSpanId != 0) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      refs_.Add(other.refs_);
      if (other.OperationName.Length != 0) {
        OperationName = other.OperationName;
      }
      if (other.Peer.Length != 0) {
        Peer = other.Peer;
      }
      if (other.SpanType != 0) {
        SpanType = other.SpanType;
      }
      if (other.SpanLayer != 0) {
        SpanLayer = other.SpanLayer;
      }
      if (other.ComponentId != 0) {
        ComponentId = other.ComponentId;
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
      tags_.Add(other.tags_);
      logs_.Add(other.logs_);
      if (other.SkipAnalysis != false) {
        SkipAnalysis = other.SkipAnalysis;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpanId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentSpanId = input.ReadInt32();
            break;
          }
          case 24: {
            StartTime = input.ReadInt64();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 42: {
            refs_.AddEntriesFrom(input, _repeated_refs_codec);
            break;
          }
          case 50: {
            OperationName = input.ReadString();
            break;
          }
          case 58: {
            Peer = input.ReadString();
            break;
          }
          case 64: {
            SpanType = (global::SkyWalking.NetworkProtocol.V3.SpanType) input.ReadEnum();
            break;
          }
          case 72: {
            SpanLayer = (global::SkyWalking.NetworkProtocol.V3.SpanLayer) input.ReadEnum();
            break;
          }
          case 80: {
            ComponentId = input.ReadInt32();
            break;
          }
          case 88: {
            IsError = input.ReadBool();
            break;
          }
          case 98: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 106: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 112: {
            SkipAnalysis = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Log : pb::IMessage<Log> {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.TracingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      time_ = other.time_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> data_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ID : pb::IMessage<ID> {
    private static readonly pb::MessageParser<ID> _parser = new pb::MessageParser<ID>(() => new ID());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.TracingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID(ID other) : this() {
      id_ = other.id_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID Clone() {
      return new ID(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_id_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> id_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Id {
      get { return id_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!id_.Equals(other.id_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= id_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      id_.WriteTo(output, _repeated_id_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += id_.CalculateSize(_repeated_id_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID other) {
      if (other == null) {
        return;
      }
      id_.Add(other.id_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
