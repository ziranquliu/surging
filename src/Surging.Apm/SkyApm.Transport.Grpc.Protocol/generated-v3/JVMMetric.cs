// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: language-agent/JVMMetric.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SkyWalking.NetworkProtocol.V3 {

  /// <summary>Holder for reflection information generated from language-agent/JVMMetric.proto</summary>
  public static partial class JVMMetricReflection {

    #region Descriptor
    /// <summary>File descriptor for language-agent/JVMMetric.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static JVMMetricReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5sYW5ndWFnZS1hZ2VudC9KVk1NZXRyaWMucHJvdG8aE2NvbW1vbi9Db21t",
            "b24ucHJvdG8iXAoTSlZNTWV0cmljQ29sbGVjdGlvbhIbCgdtZXRyaWNzGAEg",
            "AygLMgouSlZNTWV0cmljEg8KB3NlcnZpY2UYAiABKAkSFwoPc2VydmljZUlu",
            "c3RhbmNlGAMgASgJIpABCglKVk1NZXRyaWMSDAoEdGltZRgBIAEoAxIRCgNj",
            "cHUYAiABKAsyBC5DUFUSFwoGbWVtb3J5GAMgAygLMgcuTWVtb3J5Eh8KCm1l",
            "bW9yeVBvb2wYBCADKAsyCy5NZW1vcnlQb29sEg8KAmdjGAUgAygLMgMuR0MS",
            "FwoGdGhyZWFkGAYgASgLMgcuVGhyZWFkIlQKBk1lbW9yeRIOCgZpc0hlYXAY",
            "ASABKAgSDAoEaW5pdBgCIAEoAxILCgNtYXgYAyABKAMSDAoEdXNlZBgEIAEo",
            "AxIRCgljb21taXR0ZWQYBSABKAMiYQoKTWVtb3J5UG9vbBIXCgR0eXBlGAEg",
            "ASgOMgkuUG9vbFR5cGUSDAoEaW5pdBgCIAEoAxILCgNtYXgYAyABKAMSDAoE",
            "dXNlZBgEIAEoAxIRCgljb21taXR0ZWQYBSABKAMiPAoCR0MSGQoGcGhyYXNl",
            "GAEgASgOMgkuR0NQaHJhc2USDQoFY291bnQYAiABKAMSDAoEdGltZRgDIAEo",
            "AyJDCgZUaHJlYWQSEQoJbGl2ZUNvdW50GAEgASgDEhMKC2RhZW1vbkNvdW50",
            "GAIgASgDEhEKCXBlYWtDb3VudBgDIAEoAyqAAQoIUG9vbFR5cGUSFAoQQ09E",
            "RV9DQUNIRV9VU0FHRRAAEhAKDE5FV0dFTl9VU0FHRRABEhAKDE9MREdFTl9V",
            "U0FHRRACEhIKDlNVUlZJVk9SX1VTQUdFEAMSEQoNUEVSTUdFTl9VU0FHRRAE",
            "EhMKD01FVEFTUEFDRV9VU0FHRRAFKhwKCEdDUGhyYXNlEgcKA05FVxAAEgcK",
            "A09MRBABMkYKFkpWTU1ldHJpY1JlcG9ydFNlcnZpY2USLAoHY29sbGVjdBIU",
            "LkpWTU1ldHJpY0NvbGxlY3Rpb24aCS5Db21tYW5kcyIAQn0KM29yZy5hcGFj",
            "aGUuc2t5d2Fsa2luZy5hcG0ubmV0d29yay5sYW5ndWFnZS5hZ2VudC52M1AB",
            "WiRza3l3YWxraW5nL25ldHdvcmsvbGFuZ3VhZ2UvYWdlbnQvdjOqAh1Ta3lX",
            "YWxraW5nLk5ldHdvcmtQcm90b2NvbC5WM2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.V3.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SkyWalking.NetworkProtocol.V3.PoolType), typeof(global::SkyWalking.NetworkProtocol.V3.GCPhrase), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.JVMMetricCollection), global::SkyWalking.NetworkProtocol.V3.JVMMetricCollection.Parser, new[]{ "Metrics", "Service", "ServiceInstance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.JVMMetric), global::SkyWalking.NetworkProtocol.V3.JVMMetric.Parser, new[]{ "Time", "Cpu", "Memory", "MemoryPool", "Gc", "Thread" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.Memory), global::SkyWalking.NetworkProtocol.V3.Memory.Parser, new[]{ "IsHeap", "Init", "Max", "Used", "Committed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.MemoryPool), global::SkyWalking.NetworkProtocol.V3.MemoryPool.Parser, new[]{ "Type", "Init", "Max", "Used", "Committed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.GC), global::SkyWalking.NetworkProtocol.V3.GC.Parser, new[]{ "Phrase", "Count", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.Thread), global::SkyWalking.NetworkProtocol.V3.Thread.Parser, new[]{ "LiveCount", "DaemonCount", "PeakCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PoolType {
    [pbr::OriginalName("CODE_CACHE_USAGE")] CodeCacheUsage = 0,
    [pbr::OriginalName("NEWGEN_USAGE")] NewgenUsage = 1,
    [pbr::OriginalName("OLDGEN_USAGE")] OldgenUsage = 2,
    [pbr::OriginalName("SURVIVOR_USAGE")] SurvivorUsage = 3,
    [pbr::OriginalName("PERMGEN_USAGE")] PermgenUsage = 4,
    [pbr::OriginalName("METASPACE_USAGE")] MetaspaceUsage = 5,
  }

  public enum GCPhrase {
    [pbr::OriginalName("NEW")] New = 0,
    [pbr::OriginalName("OLD")] Old = 1,
  }

  #endregion

  #region Messages
  public sealed partial class JVMMetricCollection : pb::IMessage<JVMMetricCollection> {
    private static readonly pb::MessageParser<JVMMetricCollection> _parser = new pb::MessageParser<JVMMetricCollection>(() => new JVMMetricCollection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JVMMetricCollection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.JVMMetricReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JVMMetricCollection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JVMMetricCollection(JVMMetricCollection other) : this() {
      metrics_ = other.metrics_.Clone();
      service_ = other.service_;
      serviceInstance_ = other.serviceInstance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JVMMetricCollection Clone() {
      return new JVMMetricCollection(this);
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.JVMMetric> _repeated_metrics_codec
        = pb::FieldCodec.ForMessage(10, global::SkyWalking.NetworkProtocol.V3.JVMMetric.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.JVMMetric> metrics_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.JVMMetric>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.JVMMetric> Metrics {
      get { return metrics_; }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 2;
    private string service_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceInstance" field.</summary>
    public const int ServiceInstanceFieldNumber = 3;
    private string serviceInstance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceInstance {
      get { return serviceInstance_; }
      set {
        serviceInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JVMMetricCollection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JVMMetricCollection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!metrics_.Equals(other.metrics_)) return false;
      if (Service != other.Service) return false;
      if (ServiceInstance != other.ServiceInstance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= metrics_.GetHashCode();
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (ServiceInstance.Length != 0) hash ^= ServiceInstance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      metrics_.WriteTo(output, _repeated_metrics_codec);
      if (Service.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Service);
      }
      if (ServiceInstance.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServiceInstance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (ServiceInstance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceInstance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JVMMetricCollection other) {
      if (other == null) {
        return;
      }
      metrics_.Add(other.metrics_);
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.ServiceInstance.Length != 0) {
        ServiceInstance = other.ServiceInstance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
          case 18: {
            Service = input.ReadString();
            break;
          }
          case 26: {
            ServiceInstance = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JVMMetric : pb::IMessage<JVMMetric> {
    private static readonly pb::MessageParser<JVMMetric> _parser = new pb::MessageParser<JVMMetric>(() => new JVMMetric());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JVMMetric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.JVMMetricReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JVMMetric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JVMMetric(JVMMetric other) : this() {
      time_ = other.time_;
      cpu_ = other.cpu_ != null ? other.cpu_.Clone() : null;
      memory_ = other.memory_.Clone();
      memoryPool_ = other.memoryPool_.Clone();
      gc_ = other.gc_.Clone();
      thread_ = other.thread_ != null ? other.thread_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JVMMetric Clone() {
      return new JVMMetric(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "cpu" field.</summary>
    public const int CpuFieldNumber = 2;
    private global::SkyWalking.NetworkProtocol.V3.CPU cpu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.CPU Cpu {
      get { return cpu_; }
      set {
        cpu_ = value;
      }
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.Memory> _repeated_memory_codec
        = pb::FieldCodec.ForMessage(26, global::SkyWalking.NetworkProtocol.V3.Memory.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.Memory> memory_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.Memory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.Memory> Memory {
      get { return memory_; }
    }

    /// <summary>Field number for the "memoryPool" field.</summary>
    public const int MemoryPoolFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.MemoryPool> _repeated_memoryPool_codec
        = pb::FieldCodec.ForMessage(34, global::SkyWalking.NetworkProtocol.V3.MemoryPool.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.MemoryPool> memoryPool_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.MemoryPool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.MemoryPool> MemoryPool {
      get { return memoryPool_; }
    }

    /// <summary>Field number for the "gc" field.</summary>
    public const int GcFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.GC> _repeated_gc_codec
        = pb::FieldCodec.ForMessage(42, global::SkyWalking.NetworkProtocol.V3.GC.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.GC> gc_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.GC>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.GC> Gc {
      get { return gc_; }
    }

    /// <summary>Field number for the "thread" field.</summary>
    public const int ThreadFieldNumber = 6;
    private global::SkyWalking.NetworkProtocol.V3.Thread thread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.Thread Thread {
      get { return thread_; }
      set {
        thread_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JVMMetric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JVMMetric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (!object.Equals(Cpu, other.Cpu)) return false;
      if(!memory_.Equals(other.memory_)) return false;
      if(!memoryPool_.Equals(other.memoryPool_)) return false;
      if(!gc_.Equals(other.gc_)) return false;
      if (!object.Equals(Thread, other.Thread)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (cpu_ != null) hash ^= Cpu.GetHashCode();
      hash ^= memory_.GetHashCode();
      hash ^= memoryPool_.GetHashCode();
      hash ^= gc_.GetHashCode();
      if (thread_ != null) hash ^= Thread.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (cpu_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Cpu);
      }
      memory_.WriteTo(output, _repeated_memory_codec);
      memoryPool_.WriteTo(output, _repeated_memoryPool_codec);
      gc_.WriteTo(output, _repeated_gc_codec);
      if (thread_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Thread);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (cpu_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cpu);
      }
      size += memory_.CalculateSize(_repeated_memory_codec);
      size += memoryPool_.CalculateSize(_repeated_memoryPool_codec);
      size += gc_.CalculateSize(_repeated_gc_codec);
      if (thread_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Thread);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JVMMetric other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.cpu_ != null) {
        if (cpu_ == null) {
          Cpu = new global::SkyWalking.NetworkProtocol.V3.CPU();
        }
        Cpu.MergeFrom(other.Cpu);
      }
      memory_.Add(other.memory_);
      memoryPool_.Add(other.memoryPool_);
      gc_.Add(other.gc_);
      if (other.thread_ != null) {
        if (thread_ == null) {
          Thread = new global::SkyWalking.NetworkProtocol.V3.Thread();
        }
        Thread.MergeFrom(other.Thread);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 18: {
            if (cpu_ == null) {
              Cpu = new global::SkyWalking.NetworkProtocol.V3.CPU();
            }
            input.ReadMessage(Cpu);
            break;
          }
          case 26: {
            memory_.AddEntriesFrom(input, _repeated_memory_codec);
            break;
          }
          case 34: {
            memoryPool_.AddEntriesFrom(input, _repeated_memoryPool_codec);
            break;
          }
          case 42: {
            gc_.AddEntriesFrom(input, _repeated_gc_codec);
            break;
          }
          case 50: {
            if (thread_ == null) {
              Thread = new global::SkyWalking.NetworkProtocol.V3.Thread();
            }
            input.ReadMessage(Thread);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Memory : pb::IMessage<Memory> {
    private static readonly pb::MessageParser<Memory> _parser = new pb::MessageParser<Memory>(() => new Memory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Memory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.JVMMetricReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Memory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Memory(Memory other) : this() {
      isHeap_ = other.isHeap_;
      init_ = other.init_;
      max_ = other.max_;
      used_ = other.used_;
      committed_ = other.committed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Memory Clone() {
      return new Memory(this);
    }

    /// <summary>Field number for the "isHeap" field.</summary>
    public const int IsHeapFieldNumber = 1;
    private bool isHeap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHeap {
      get { return isHeap_; }
      set {
        isHeap_ = value;
      }
    }

    /// <summary>Field number for the "init" field.</summary>
    public const int InitFieldNumber = 2;
    private long init_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Init {
      get { return init_; }
      set {
        init_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 3;
    private long max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "used" field.</summary>
    public const int UsedFieldNumber = 4;
    private long used_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Used {
      get { return used_; }
      set {
        used_ = value;
      }
    }

    /// <summary>Field number for the "committed" field.</summary>
    public const int CommittedFieldNumber = 5;
    private long committed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Committed {
      get { return committed_; }
      set {
        committed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Memory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Memory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsHeap != other.IsHeap) return false;
      if (Init != other.Init) return false;
      if (Max != other.Max) return false;
      if (Used != other.Used) return false;
      if (Committed != other.Committed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsHeap != false) hash ^= IsHeap.GetHashCode();
      if (Init != 0L) hash ^= Init.GetHashCode();
      if (Max != 0L) hash ^= Max.GetHashCode();
      if (Used != 0L) hash ^= Used.GetHashCode();
      if (Committed != 0L) hash ^= Committed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsHeap != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsHeap);
      }
      if (Init != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Init);
      }
      if (Max != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Max);
      }
      if (Used != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Used);
      }
      if (Committed != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Committed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsHeap != false) {
        size += 1 + 1;
      }
      if (Init != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Init);
      }
      if (Max != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Max);
      }
      if (Used != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Used);
      }
      if (Committed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Committed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Memory other) {
      if (other == null) {
        return;
      }
      if (other.IsHeap != false) {
        IsHeap = other.IsHeap;
      }
      if (other.Init != 0L) {
        Init = other.Init;
      }
      if (other.Max != 0L) {
        Max = other.Max;
      }
      if (other.Used != 0L) {
        Used = other.Used;
      }
      if (other.Committed != 0L) {
        Committed = other.Committed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsHeap = input.ReadBool();
            break;
          }
          case 16: {
            Init = input.ReadInt64();
            break;
          }
          case 24: {
            Max = input.ReadInt64();
            break;
          }
          case 32: {
            Used = input.ReadInt64();
            break;
          }
          case 40: {
            Committed = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemoryPool : pb::IMessage<MemoryPool> {
    private static readonly pb::MessageParser<MemoryPool> _parser = new pb::MessageParser<MemoryPool>(() => new MemoryPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemoryPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.JVMMetricReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryPool(MemoryPool other) : this() {
      type_ = other.type_;
      init_ = other.init_;
      max_ = other.max_;
      used_ = other.used_;
      committed_ = other.committed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryPool Clone() {
      return new MemoryPool(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::SkyWalking.NetworkProtocol.V3.PoolType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.PoolType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "init" field.</summary>
    public const int InitFieldNumber = 2;
    private long init_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Init {
      get { return init_; }
      set {
        init_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 3;
    private long max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "used" field.</summary>
    public const int UsedFieldNumber = 4;
    private long used_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Used {
      get { return used_; }
      set {
        used_ = value;
      }
    }

    /// <summary>Field number for the "committed" field.</summary>
    public const int CommittedFieldNumber = 5;
    private long committed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Committed {
      get { return committed_; }
      set {
        committed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemoryPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemoryPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Init != other.Init) return false;
      if (Max != other.Max) return false;
      if (Used != other.Used) return false;
      if (Committed != other.Committed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Init != 0L) hash ^= Init.GetHashCode();
      if (Max != 0L) hash ^= Max.GetHashCode();
      if (Used != 0L) hash ^= Used.GetHashCode();
      if (Committed != 0L) hash ^= Committed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Init != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Init);
      }
      if (Max != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Max);
      }
      if (Used != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Used);
      }
      if (Committed != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Committed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Init != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Init);
      }
      if (Max != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Max);
      }
      if (Used != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Used);
      }
      if (Committed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Committed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemoryPool other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Init != 0L) {
        Init = other.Init;
      }
      if (other.Max != 0L) {
        Max = other.Max;
      }
      if (other.Used != 0L) {
        Used = other.Used;
      }
      if (other.Committed != 0L) {
        Committed = other.Committed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::SkyWalking.NetworkProtocol.V3.PoolType) input.ReadEnum();
            break;
          }
          case 16: {
            Init = input.ReadInt64();
            break;
          }
          case 24: {
            Max = input.ReadInt64();
            break;
          }
          case 32: {
            Used = input.ReadInt64();
            break;
          }
          case 40: {
            Committed = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GC : pb::IMessage<GC> {
    private static readonly pb::MessageParser<GC> _parser = new pb::MessageParser<GC>(() => new GC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.JVMMetricReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GC(GC other) : this() {
      phrase_ = other.phrase_;
      count_ = other.count_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GC Clone() {
      return new GC(this);
    }

    /// <summary>Field number for the "phrase" field.</summary>
    public const int PhraseFieldNumber = 1;
    private global::SkyWalking.NetworkProtocol.V3.GCPhrase phrase_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.GCPhrase Phrase {
      get { return phrase_; }
      set {
        phrase_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phrase != other.Phrase) return false;
      if (Count != other.Count) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phrase != 0) hash ^= Phrase.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phrase != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Phrase);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phrase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phrase);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GC other) {
      if (other == null) {
        return;
      }
      if (other.Phrase != 0) {
        Phrase = other.Phrase;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Phrase = (global::SkyWalking.NetworkProtocol.V3.GCPhrase) input.ReadEnum();
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Thread : pb::IMessage<Thread> {
    private static readonly pb::MessageParser<Thread> _parser = new pb::MessageParser<Thread>(() => new Thread());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Thread> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.JVMMetricReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Thread() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Thread(Thread other) : this() {
      liveCount_ = other.liveCount_;
      daemonCount_ = other.daemonCount_;
      peakCount_ = other.peakCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Thread Clone() {
      return new Thread(this);
    }

    /// <summary>Field number for the "liveCount" field.</summary>
    public const int LiveCountFieldNumber = 1;
    private long liveCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LiveCount {
      get { return liveCount_; }
      set {
        liveCount_ = value;
      }
    }

    /// <summary>Field number for the "daemonCount" field.</summary>
    public const int DaemonCountFieldNumber = 2;
    private long daemonCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DaemonCount {
      get { return daemonCount_; }
      set {
        daemonCount_ = value;
      }
    }

    /// <summary>Field number for the "peakCount" field.</summary>
    public const int PeakCountFieldNumber = 3;
    private long peakCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PeakCount {
      get { return peakCount_; }
      set {
        peakCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Thread);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Thread other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LiveCount != other.LiveCount) return false;
      if (DaemonCount != other.DaemonCount) return false;
      if (PeakCount != other.PeakCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LiveCount != 0L) hash ^= LiveCount.GetHashCode();
      if (DaemonCount != 0L) hash ^= DaemonCount.GetHashCode();
      if (PeakCount != 0L) hash ^= PeakCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LiveCount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LiveCount);
      }
      if (DaemonCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DaemonCount);
      }
      if (PeakCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PeakCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LiveCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LiveCount);
      }
      if (DaemonCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DaemonCount);
      }
      if (PeakCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PeakCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Thread other) {
      if (other == null) {
        return;
      }
      if (other.LiveCount != 0L) {
        LiveCount = other.LiveCount;
      }
      if (other.DaemonCount != 0L) {
        DaemonCount = other.DaemonCount;
      }
      if (other.PeakCount != 0L) {
        PeakCount = other.PeakCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LiveCount = input.ReadInt64();
            break;
          }
          case 16: {
            DaemonCount = input.ReadInt64();
            break;
          }
          case 24: {
            PeakCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
