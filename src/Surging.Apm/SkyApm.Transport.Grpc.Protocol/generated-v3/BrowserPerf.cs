// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: browser/BrowserPerf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SkyWalking.NetworkProtocol.V3 {

  /// <summary>Holder for reflection information generated from browser/BrowserPerf.proto</summary>
  public static partial class BrowserPerfReflection {

    #region Descriptor
    /// <summary>File descriptor for browser/BrowserPerf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BrowserPerfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chlicm93c2VyL0Jyb3dzZXJQZXJmLnByb3RvGhNjb21tb24vQ29tbW9uLnBy",
            "b3RvItQBCg9Ccm93c2VyUGVyZkRhdGESDwoHc2VydmljZRgBIAEoCRIWCg5z",
            "ZXJ2aWNlVmVyc2lvbhgCIAEoCRIMCgR0aW1lGAMgASgDEhAKCHBhZ2VQYXRo",
            "GAQgASgJEhQKDHJlZGlyZWN0VGltZRgFIAEoBRIPCgdkbnNUaW1lGAYgASgF",
            "Eg8KB3JlcVRpbWUYByABKAUSFwoPZG9tQW5hbHlzaXNUaW1lGAggASgFEhQK",
            "DGRvbVJlYWR5VGltZRgJIAEoBRIRCglibGFua1RpbWUYCiABKAUihgIKD0Jy",
            "b3dzZXJFcnJvckxvZxIQCgh1bmlxdWVJZBgBIAEoCRIPCgdzZXJ2aWNlGAIg",
            "ASgJEhYKDnNlcnZpY2VWZXJzaW9uGAMgASgJEgwKBHRpbWUYBCABKAMSEAoI",
            "cGFnZVBhdGgYBSABKAkSIAoIY2F0ZWdvcnkYBiABKA4yDi5FcnJvckNhdGVn",
            "b3J5Eg0KBWdyYWRlGAcgASgJEg8KB21lc3NhZ2UYCCABKAkSDAoEbGluZRgJ",
            "IAEoBRILCgNjb2wYCiABKAUSDQoFc3RhY2sYCyABKAkSEAoIZXJyb3JVcmwY",
            "DCABKAkSGgoSZmlyc3RSZXBvcnRlZEVycm9yGA0gASgIKlIKDUVycm9yQ2F0",
            "ZWdvcnkSCAoEYWpheBAAEgwKCHJlc291cmNlEAESBwoDdnVlEAISCwoHcHJv",
            "bWlzZRADEgYKAmpzEAQSCwoHdW5rbm93bhAFMnsKEkJyb3dzZXJQZXJmU2Vy",
            "dmljZRIwCg9jb2xsZWN0UGVyZkRhdGESEC5Ccm93c2VyUGVyZkRhdGEaCS5D",
            "b21tYW5kcyIAEjMKEGNvbGxlY3RFcnJvckxvZ3MSEC5Ccm93c2VyRXJyb3JM",
            "b2caCS5Db21tYW5kcyIAKAFCfQozb3JnLmFwYWNoZS5za3l3YWxraW5nLmFw",
            "bS5uZXR3b3JrLmxhbmd1YWdlLmFnZW50LnYzUAFaJHNreXdhbGtpbmcvbmV0",
            "d29yay9sYW5ndWFnZS9hZ2VudC92M6oCHVNreVdhbGtpbmcuTmV0d29ya1By",
            "b3RvY29sLlYzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.V3.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SkyWalking.NetworkProtocol.V3.ErrorCategory), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.BrowserPerfData), global::SkyWalking.NetworkProtocol.V3.BrowserPerfData.Parser, new[]{ "Service", "ServiceVersion", "Time", "PagePath", "RedirectTime", "DnsTime", "ReqTime", "DomAnalysisTime", "DomReadyTime", "BlankTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.BrowserErrorLog), global::SkyWalking.NetworkProtocol.V3.BrowserErrorLog.Parser, new[]{ "UniqueId", "Service", "ServiceVersion", "Time", "PagePath", "Category", "Grade", "Message", "Line", "Col", "Stack", "ErrorUrl", "FirstReportedError" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ErrorCategory {
    [pbr::OriginalName("ajax")] Ajax = 0,
    [pbr::OriginalName("resource")] Resource = 1,
    [pbr::OriginalName("vue")] Vue = 2,
    [pbr::OriginalName("promise")] Promise = 3,
    [pbr::OriginalName("js")] Js = 4,
    [pbr::OriginalName("unknown")] Unknown = 5,
  }

  #endregion

  #region Messages
  public sealed partial class BrowserPerfData : pb::IMessage<BrowserPerfData> {
    private static readonly pb::MessageParser<BrowserPerfData> _parser = new pb::MessageParser<BrowserPerfData>(() => new BrowserPerfData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrowserPerfData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.BrowserPerfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrowserPerfData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrowserPerfData(BrowserPerfData other) : this() {
      service_ = other.service_;
      serviceVersion_ = other.serviceVersion_;
      time_ = other.time_;
      pagePath_ = other.pagePath_;
      redirectTime_ = other.redirectTime_;
      dnsTime_ = other.dnsTime_;
      reqTime_ = other.reqTime_;
      domAnalysisTime_ = other.domAnalysisTime_;
      domReadyTime_ = other.domReadyTime_;
      blankTime_ = other.blankTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrowserPerfData Clone() {
      return new BrowserPerfData(this);
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 1;
    private string service_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceVersion" field.</summary>
    public const int ServiceVersionFieldNumber = 2;
    private string serviceVersion_ = "";
    /// <summary>
    /// Service version in browser is the Instance concept in the backend.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceVersion {
      get { return serviceVersion_; }
      set {
        serviceVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    /// <summary>
    /// Perf data time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "pagePath" field.</summary>
    public const int PagePathFieldNumber = 4;
    private string pagePath_ = "";
    /// <summary>
    /// Page path in browser is the endpoint concept in the backend
    /// Page path in the browser, mostly it is URI, without parameter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PagePath {
      get { return pagePath_; }
      set {
        pagePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "redirectTime" field.</summary>
    public const int RedirectTimeFieldNumber = 5;
    private int redirectTime_;
    /// <summary>
    /// Unit of all time related field should be `ms`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RedirectTime {
      get { return redirectTime_; }
      set {
        redirectTime_ = value;
      }
    }

    /// <summary>Field number for the "dnsTime" field.</summary>
    public const int DnsTimeFieldNumber = 6;
    private int dnsTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DnsTime {
      get { return dnsTime_; }
      set {
        dnsTime_ = value;
      }
    }

    /// <summary>Field number for the "reqTime" field.</summary>
    public const int ReqTimeFieldNumber = 7;
    private int reqTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReqTime {
      get { return reqTime_; }
      set {
        reqTime_ = value;
      }
    }

    /// <summary>Field number for the "domAnalysisTime" field.</summary>
    public const int DomAnalysisTimeFieldNumber = 8;
    private int domAnalysisTime_;
    /// <summary>
    /// analysis dom tree time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DomAnalysisTime {
      get { return domAnalysisTime_; }
      set {
        domAnalysisTime_ = value;
      }
    }

    /// <summary>Field number for the "domReadyTime" field.</summary>
    public const int DomReadyTimeFieldNumber = 9;
    private int domReadyTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DomReadyTime {
      get { return domReadyTime_; }
      set {
        domReadyTime_ = value;
      }
    }

    /// <summary>Field number for the "blankTime" field.</summary>
    public const int BlankTimeFieldNumber = 10;
    private int blankTime_;
    /// <summary>
    /// page blank time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlankTime {
      get { return blankTime_; }
      set {
        blankTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BrowserPerfData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BrowserPerfData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Service != other.Service) return false;
      if (ServiceVersion != other.ServiceVersion) return false;
      if (Time != other.Time) return false;
      if (PagePath != other.PagePath) return false;
      if (RedirectTime != other.RedirectTime) return false;
      if (DnsTime != other.DnsTime) return false;
      if (ReqTime != other.ReqTime) return false;
      if (DomAnalysisTime != other.DomAnalysisTime) return false;
      if (DomReadyTime != other.DomReadyTime) return false;
      if (BlankTime != other.BlankTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (ServiceVersion.Length != 0) hash ^= ServiceVersion.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (PagePath.Length != 0) hash ^= PagePath.GetHashCode();
      if (RedirectTime != 0) hash ^= RedirectTime.GetHashCode();
      if (DnsTime != 0) hash ^= DnsTime.GetHashCode();
      if (ReqTime != 0) hash ^= ReqTime.GetHashCode();
      if (DomAnalysisTime != 0) hash ^= DomAnalysisTime.GetHashCode();
      if (DomReadyTime != 0) hash ^= DomReadyTime.GetHashCode();
      if (BlankTime != 0) hash ^= BlankTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Service.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Service);
      }
      if (ServiceVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceVersion);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (PagePath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PagePath);
      }
      if (RedirectTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RedirectTime);
      }
      if (DnsTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DnsTime);
      }
      if (ReqTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ReqTime);
      }
      if (DomAnalysisTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DomAnalysisTime);
      }
      if (DomReadyTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(DomReadyTime);
      }
      if (BlankTime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BlankTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (ServiceVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceVersion);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (PagePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PagePath);
      }
      if (RedirectTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RedirectTime);
      }
      if (DnsTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DnsTime);
      }
      if (ReqTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqTime);
      }
      if (DomAnalysisTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DomAnalysisTime);
      }
      if (DomReadyTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DomReadyTime);
      }
      if (BlankTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlankTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BrowserPerfData other) {
      if (other == null) {
        return;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.ServiceVersion.Length != 0) {
        ServiceVersion = other.ServiceVersion;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.PagePath.Length != 0) {
        PagePath = other.PagePath;
      }
      if (other.RedirectTime != 0) {
        RedirectTime = other.RedirectTime;
      }
      if (other.DnsTime != 0) {
        DnsTime = other.DnsTime;
      }
      if (other.ReqTime != 0) {
        ReqTime = other.ReqTime;
      }
      if (other.DomAnalysisTime != 0) {
        DomAnalysisTime = other.DomAnalysisTime;
      }
      if (other.DomReadyTime != 0) {
        DomReadyTime = other.DomReadyTime;
      }
      if (other.BlankTime != 0) {
        BlankTime = other.BlankTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Service = input.ReadString();
            break;
          }
          case 18: {
            ServiceVersion = input.ReadString();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
          case 34: {
            PagePath = input.ReadString();
            break;
          }
          case 40: {
            RedirectTime = input.ReadInt32();
            break;
          }
          case 48: {
            DnsTime = input.ReadInt32();
            break;
          }
          case 56: {
            ReqTime = input.ReadInt32();
            break;
          }
          case 64: {
            DomAnalysisTime = input.ReadInt32();
            break;
          }
          case 72: {
            DomReadyTime = input.ReadInt32();
            break;
          }
          case 80: {
            BlankTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BrowserErrorLog : pb::IMessage<BrowserErrorLog> {
    private static readonly pb::MessageParser<BrowserErrorLog> _parser = new pb::MessageParser<BrowserErrorLog>(() => new BrowserErrorLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrowserErrorLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.BrowserPerfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrowserErrorLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrowserErrorLog(BrowserErrorLog other) : this() {
      uniqueId_ = other.uniqueId_;
      service_ = other.service_;
      serviceVersion_ = other.serviceVersion_;
      time_ = other.time_;
      pagePath_ = other.pagePath_;
      category_ = other.category_;
      grade_ = other.grade_;
      message_ = other.message_;
      line_ = other.line_;
      col_ = other.col_;
      stack_ = other.stack_;
      errorUrl_ = other.errorUrl_;
      firstReportedError_ = other.firstReportedError_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrowserErrorLog Clone() {
      return new BrowserErrorLog(this);
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private string uniqueId_ = "";
    /// <summary>
    /// UUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 2;
    private string service_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceVersion" field.</summary>
    public const int ServiceVersionFieldNumber = 3;
    private string serviceVersion_ = "";
    /// <summary>
    /// Service version in browser is the Instance concept in the backend.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceVersion {
      get { return serviceVersion_; }
      set {
        serviceVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private long time_;
    /// <summary>
    /// Error log time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "pagePath" field.</summary>
    public const int PagePathFieldNumber = 5;
    private string pagePath_ = "";
    /// <summary>
    /// Page path in browser is the endpoint concept in the backend
    /// Page path in the browser, mostly it is URI, without parameter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PagePath {
      get { return pagePath_; }
      set {
        pagePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 6;
    private global::SkyWalking.NetworkProtocol.V3.ErrorCategory category_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.ErrorCategory Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 7;
    private string grade_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Grade {
      get { return grade_; }
      set {
        grade_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 8;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 9;
    private int line_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 10;
    private int col_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    /// <summary>Field number for the "stack" field.</summary>
    public const int StackFieldNumber = 11;
    private string stack_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stack {
      get { return stack_; }
      set {
        stack_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errorUrl" field.</summary>
    public const int ErrorUrlFieldNumber = 12;
    private string errorUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorUrl {
      get { return errorUrl_; }
      set {
        errorUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firstReportedError" field.</summary>
    public const int FirstReportedErrorFieldNumber = 13;
    private bool firstReportedError_;
    /// <summary>
    /// Then the PV with error is only calculated when firstReportedError is true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FirstReportedError {
      get { return firstReportedError_; }
      set {
        firstReportedError_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BrowserErrorLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BrowserErrorLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (Service != other.Service) return false;
      if (ServiceVersion != other.ServiceVersion) return false;
      if (Time != other.Time) return false;
      if (PagePath != other.PagePath) return false;
      if (Category != other.Category) return false;
      if (Grade != other.Grade) return false;
      if (Message != other.Message) return false;
      if (Line != other.Line) return false;
      if (Col != other.Col) return false;
      if (Stack != other.Stack) return false;
      if (ErrorUrl != other.ErrorUrl) return false;
      if (FirstReportedError != other.FirstReportedError) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId.Length != 0) hash ^= UniqueId.GetHashCode();
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (ServiceVersion.Length != 0) hash ^= ServiceVersion.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (PagePath.Length != 0) hash ^= PagePath.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (Grade.Length != 0) hash ^= Grade.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Line != 0) hash ^= Line.GetHashCode();
      if (Col != 0) hash ^= Col.GetHashCode();
      if (Stack.Length != 0) hash ^= Stack.GetHashCode();
      if (ErrorUrl.Length != 0) hash ^= ErrorUrl.GetHashCode();
      if (FirstReportedError != false) hash ^= FirstReportedError.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UniqueId);
      }
      if (Service.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Service);
      }
      if (ServiceVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServiceVersion);
      }
      if (Time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Time);
      }
      if (PagePath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PagePath);
      }
      if (Category != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Category);
      }
      if (Grade.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Grade);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Message);
      }
      if (Line != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Line);
      }
      if (Col != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Col);
      }
      if (Stack.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Stack);
      }
      if (ErrorUrl.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ErrorUrl);
      }
      if (FirstReportedError != false) {
        output.WriteRawTag(104);
        output.WriteBool(FirstReportedError);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueId);
      }
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (ServiceVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceVersion);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (PagePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PagePath);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
      }
      if (Grade.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Grade);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Line);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      if (Stack.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stack);
      }
      if (ErrorUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorUrl);
      }
      if (FirstReportedError != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BrowserErrorLog other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId.Length != 0) {
        UniqueId = other.UniqueId;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.ServiceVersion.Length != 0) {
        ServiceVersion = other.ServiceVersion;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.PagePath.Length != 0) {
        PagePath = other.PagePath;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.Grade.Length != 0) {
        Grade = other.Grade;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      if (other.Col != 0) {
        Col = other.Col;
      }
      if (other.Stack.Length != 0) {
        Stack = other.Stack;
      }
      if (other.ErrorUrl.Length != 0) {
        ErrorUrl = other.ErrorUrl;
      }
      if (other.FirstReportedError != false) {
        FirstReportedError = other.FirstReportedError;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UniqueId = input.ReadString();
            break;
          }
          case 18: {
            Service = input.ReadString();
            break;
          }
          case 26: {
            ServiceVersion = input.ReadString();
            break;
          }
          case 32: {
            Time = input.ReadInt64();
            break;
          }
          case 42: {
            PagePath = input.ReadString();
            break;
          }
          case 48: {
            Category = (global::SkyWalking.NetworkProtocol.V3.ErrorCategory) input.ReadEnum();
            break;
          }
          case 58: {
            Grade = input.ReadString();
            break;
          }
          case 66: {
            Message = input.ReadString();
            break;
          }
          case 72: {
            Line = input.ReadInt32();
            break;
          }
          case 80: {
            Col = input.ReadInt32();
            break;
          }
          case 90: {
            Stack = input.ReadString();
            break;
          }
          case 98: {
            ErrorUrl = input.ReadString();
            break;
          }
          case 104: {
            FirstReportedError = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
